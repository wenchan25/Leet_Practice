/*
注意越界的问题
如果对小于n的每一个数都进行判断的话，会造成超时。因此我们找到更加好的方法进行处理
在这里，我们选择厄拉多塞筛法(Sieve of Eeatosthese)

该算法的具体操作：先将 2~n 的各个数放入表中，然后在2的上面画一个圆圈，然后划去2的其他倍数；
第一个既未画圈又没有被划去的数是3，将它画圈，再划去3的其他倍数；
现在既未画圈又没有被划去的第一个数 是5，将它画圈，并划去5的其他倍数……
依次类推，一直到所有小于或等于 n 的各数都画了圈或划去为止。
这时，表中画了圈的以及未划去的那些数正好就是小于 n 的素数。
*/

public static int countPrimes(int n) {
        if (n <= 0) {
            return 0;
        }
        if (n == 1 || n == 2) {
            return 0;
        }

        // to initialize every element from "2" in the boolean array to be true
        boolean[] isPrimes = new boolean[n];
        for (int i = 2; i < n; i++) {
            isPrimes[i] = true;
        }

        // implementation of Sieve of Eratosthenes
        for (int i = 2; i < n; i++) {
            if (isPrimes[i]) {
                for (int j = i + i; j < n; j += i) {
                    isPrimes[j] = false;
                }
            }
        }

        // finally count all primes
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (isPrimes[i]) {
                count++;
            }
        }
        return count;
    }


    public static int countPrimes2(int n) {
        n = n - 1;
        ArrayList<Integer> primes = new ArrayList<Integer>();

        if (n <= 3) {
            return n - 1;
        }

        primes.add(2);
        primes.add(3);

        for (int i = 4; i <= n; i++) {
            boolean isPrime = true;
            for (int p : primes) {
                if (i % p == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes.add(i);
            }
        }
        return primes.size();
    }
