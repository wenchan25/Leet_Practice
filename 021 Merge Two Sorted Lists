/* Iteration */

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        
        ListNode prev = new ListNode(0); // need to have a value;
        ListNode head = prev;
        
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                head.next = l1;
                l1 = l1.next;
            }
            else if (l1.val > l2.val) {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next; // curcial to move this cursor;
            
        }
        
        head.next = l1 == null ? l2 : l1;
        
        return prev.next;
    }
}

/* Recursion */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        
        if (l1.val <= l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1; // only need to grab the head;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2; // grab the head, the rest are sorted;
        }
    }
}
