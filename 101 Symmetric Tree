/* Recursion */

/* 
Two trees are a mirror reflection of each other if:
    Their two roots have the same value.
    The right subtree of each tree is a mirror reflection of the left subtree of the other tree.
*/

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        return isMirror(root, root);
    }
    
    private static boolean isMirror (TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return true;
        if (t1 == null || t2 == null) return false;
        
        return (t1.val == t2.val && isMirror(t1.left, t2.right) && isMirror(t1.right, t2.left));
    }
}

/* Iteration 顺序很重要 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        
        if (root == null) return true; // shortcut
        
        q.offer(root.left);
        q.offer(root.right);
        
        while (!q.isEmpty()) {
            TreeNode t1 = q.poll(), t2 = q.poll();// get the first 2 elements;
            if (t1 == null && t2 == null) continue; // reached the child node;
            if (t1 == null || t2 == null) return false; // one of them is null;
            if (t1.val != t2.val) return false; // check the values, not only the node;
            q.offer(t1.left);
            q.offer(t2.right);
            q.offer(t1.right);
            q.offer(t2.left);
        }
        return q.isEmpty();
        
    }
}
