/* Solution covers negative numbers, Kadane's Algorithm */
class Solution {
    public int maxProfit(int[] prices) {
        int maxCurr = 0, maxSoFar = 0;
        
        for (int i = 1; i < prices.length; i++) {
            int curr = prices[i] - prices[i-1];
            maxCurr += curr;
            maxCurr = Math.max(0, maxCurr);// check if it's 0;
            maxSoFar = Math.max(maxCurr, maxSoFar);
        }
        
        return maxSoFar;
    }
}

/* no need to initialize minPrice to be Integer.MAX_VALUE */
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length <=1) return 0;
        
        int maxProfit = 0, minPrice = prices[0];
        
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < minPrice) minPrice = prices[i];
            if (prices[i] - minPrice > maxProfit) maxProfit = prices[i] - minPrice;
        }
        return maxProfit;
        
    }
}

/* standard solution */
public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}


/* brute force */
public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}
