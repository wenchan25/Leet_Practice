/* Stack + Map, more generic */

class Solution {
    public boolean isValid(String s) {
        if (s.length() == 0) return true; // boundary

        Map<Character, Character> map = new HashMap<>();
        map.put(')', '(');
        map.put('}', '{');
        map.put(']', '[');

        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i); // )
            if (map.containsKey(c)) { // if it's closing
                if (stack.isEmpty()) return false;
                else if (map.get(c) != stack.pop())
                    return false; // it will pop anyway, so no need to worry the top element;
            } else stack.push(c);
        }
        return stack.isEmpty();
    }
}

/* Regular 1 stack check */
class Solution {
     public boolean isValid(String s) {
        // early exit
        if (s == null || s.length() == 0) return true; 
        if (s.length() == 1) return false;

        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // check if it's left parenthesis
            if (c == '(' || c == '{' || c == '[') stack.push(c); // push left
            else {
                if (stack.isEmpty() || 
                c == ')' && stack.pop() != '(' || 
                c == '}' && stack.pop()!= '{' || 
                c == ']' && stack.pop() != '[')
                    return false;
            }  
        }
        return stack.isEmpty();
    }
}

/* Smart 1 stack check */
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // push the opposite symbol
            if (c == '(') stack.push(')');
            else if (c == '{') stack.push('}');
            else if (c == '[') stack.push(']');
            else if (stack.isEmpty() || c != stack.pop()) return false;
        }
        return stack.isEmpty();
    }
}
