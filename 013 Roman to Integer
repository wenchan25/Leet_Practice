public class Solution {
    public static int romanToInt(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }

        Map<Character, Integer> romanMap = new HashMap<Character, Integer>();
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);

        int endPoint = s.length();
        int result = romanMap.get(s.charAt(endPoint-1));
        for (int i = endPoint - 2; i >= 0; i--) {
            if (romanMap.get(s.charAt(i+1)) <= romanMap.get(s.charAt(i))) {
                result += romanMap.get(s.charAt(i));
            }else{
                result -= romanMap.get(s.charAt(i));
            }
        }
        return result;
    }
}

/* more clear code */
class Solution {
    public int romanToInt(String s) {
        if (s == null || s.length() == 0) return 0;
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);

        char[] sc = s.toCharArray();
        int len = s.length();
        int sum = map.get(sc[len - 1]); // initialize as the right-most value;
        for (int i = len - 2; i >= 0; i--) {
            int leftVal = map.get(sc[i]); // get the value
            int rightVal = map.get(sc[i + 1]); 
            if (leftVal < rightVal) sum -= leftVal;
            else sum += leftVal;
        }
        return sum;
    }
}

/*
计数规则：
相同的数字连写，所表示的数等于这些数字相加得到的数，例如：III = 3
小的数字在大的数字右边，所表示的数等于这些数字相加得到的数，例如：VIII = 8
小的数字，限于（I、X和C）在大的数字左边，所表示的数等于大数减去小数所得的数，例如：IV = 4
正常使用时，连续的数字重复不得超过三次
在一个数的上面画横线，表示这个数扩大1000倍（本题只考虑3999以内的数，所以用不到这条规则）

其次，罗马数字转阿拉伯数字规则（仅限于3999以内）：

从前向后遍历罗马数字，如果某个数比前一个数小，则加上该数。反之，减去前一个数的两倍然后加上该数

*/
