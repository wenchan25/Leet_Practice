/* Classical divide and conquer */
    public int maxSubArray(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }

    private static int helper(int[] nums, int left, int right) {
        if (left == right) return nums[left];
        int mid = left + (right - left) / 2;

        int leftSum = helper(nums, left, mid);
        int rightSum = helper(nums, mid + 1, right);
        int crossSum = getCrossSum(nums, left, right, mid);

        return Math.max(Math.max(leftSum, rightSum), crossSum);
    }

    private static int getCrossSum(int[] nums, int left, int right, int mid) {
        if (left == right) return nums[left];

        // calculate left part
        int leftSubSum = Integer.MIN_VALUE;
        int currSum = 0;
        for (int i = mid; i >= 0; i--) {
            currSum += nums[i];
            leftSubSum = Math.max(leftSubSum, currSum);
        }

        // calculate right part
        int rightSubSum = Integer.MIN_VALUE;
        currSum = 0; // reset
        for (int i = mid + 1; i <= right; i++) {
            currSum += nums[i];
            rightSubSum = Math.max(rightSubSum, currSum);
        }

        // get the max value across the board
        return (leftSubSum + rightSubSum);
    }


/* Greedy */
class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        // if (nums.length == 1) return nums[0];
        
        int ans = Integer.MIN_VALUE; // answer can be minimum
        int sum = 0; // sum needs to be 0;
        
        for (int n : nums) {
            sum = Math.max(n, sum + n);
            ans = Math.max(ans, sum);
        }
        return ans;
    }
}

/* DP */

class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        
        int currSum = nums[0];
        int max = currSum;
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i-1] > 0) nums[i] += nums[i-1]; // add current with previous if > 0
            max = Math.max(nums[i], max);
        }
        return max;
    }
}
