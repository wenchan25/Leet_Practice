/* Classical divide and conquer */
    public int maxSubArray(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }

    private static int helper(int[] nums, int left, int right) {
        if (left == right) return nums[left];
        int mid = left + (right - left) / 2;

        int leftSum = helper(nums, left, mid);
        int rightSum = helper(nums, mid + 1, right);
        int crossSum = getCrossSum(nums, left, right, mid);

        return Math.max(Math.max(leftSum, rightSum), crossSum);
    }

    private static int getCrossSum(int[] nums, int left, int right, int mid) {
        if (left == right) return nums[left];

        // calculate left part
        int leftSubSum = Integer.MIN_VALUE;
        int currSum = 0;
        for (int i = mid; i >= 0; i--) {
            currSum += nums[i];
            leftSubSum = Math.max(leftSubSum, currSum);
        }

        // calculate right part
        int rightSubSum = Integer.MIN_VALUE;
        currSum = 0; // reset
        for (int i = mid + 1; i <= right; i++) {
            currSum += nums[i];
            rightSubSum = Math.max(rightSubSum, currSum);
        }

        // get the max value across the board
        return (leftSubSum + rightSubSum);
    }


/* 也可以写成这样 leftSum = nums[mid], rightSum = nums[mid+1] to avoid confusion */
class Solution {
    public int maxSubArray(int[] nums) {
        return helper(nums, 0, nums.length-1);
    }
    
    private static int helper(int[] nums, int left, int right) {
        if (left == right) return nums[left];
        
        int mid = left + (right - left)/2;
        int leftSum = helper(nums, left, mid);
        int rightSum = helper(nums, mid+1, right);
        int crossSum = crossSum(nums, left, right, mid);
        
        return Math.max(Math.max(leftSum, rightSum), crossSum);
    }
    
    private static int crossSum(int[] nums, int left, int right, int mid) {
        if (left == right) return nums[left];
        
        int leftSum = nums[mid];
        int currSum = nums[mid];
        for (int i = mid - 1; i >= 0; i--) {
            currSum += nums[i];
            leftSum = Math.max(leftSum, currSum);
        }
        
        currSum = nums[mid + 1];
        int rightSum = nums[mid + 1];
        for (int i = mid + 2; i < right; i++) {
            currSum += nums[i];
            rightSum = Math.max(rightSum, currSum);
        }
        
        return leftSum + rightSum;
    }
}


/* Greedy */
class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        // if (nums.length == 1) return nums[0];
        
        int ans = Integer.MIN_VALUE; // answer can be minimum
        int sum = 0; // sum needs to be 0;
        
        for (int n : nums) {
            sum = Math.max(n, sum + n);
            ans = Math.max(ans, sum);
        }
        return ans;
    }
}

/* this is better, no need to worry Integer.MIN_VALUE */
class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0]; 
        int max = nums[0];
        
        for (int i = 1; i < nums.length; i++) {
            sum = Math.max(nums[i], nums[i] + sum);
            max = Math.max(sum, max);
        }
        return max;
        
    }
}


/* DP */

class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        
        int currSum = nums[0];
        int max = nums[0]; //同时设为第一个
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i-1] > 0) nums[i] += nums[i-1]; // add current with previous if > 0
            max = Math.max(nums[i], max);
        }
        return max;
    }
}
